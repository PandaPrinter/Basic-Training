/**
You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, 
you and your friend take turns to flip twoconsecutive "++" into "--". 
The game ends when a person can no longer make a move and therefore the other person will be the winner.

Write a function to compute all possible states of the string after one valid move.
For example, given s = "++++", after one move, it may become one of the following states:
[
  "--++",
  "+--+",
  "++--"
]
If there is no valid move, return an empty list [].

**/

public List<String> generatePossibleNextMoves(String s) {
	List<String> res = new ArrayList<>();
	char[] tmp = s.toCharArray();
	for (int i = 0; i < s.length() - 1; i++) {
		if (s.charAt(i) == '+' && s.charAt(i+1) == '+') {
			tmp[i] = '-'; tmp[i+1] = '-';
			res.add(String.valueOf(tmp));
			tmp[i] = '+'; tmp[i+1] = '+';
		}
	}
	return res;
}

/**
Write a function to determine if the starting player can guarantee a win.
For example, given s = "++++", return true. The starting player can guarantee a win by flipping the middle "++" to become "+--+".
**/

public class Solution {
    public boolean canWin(String s) {
    	if (s == null || s.length() == 0) return false;
    	char[] arr = s.toCharArray();
    	Map<char[], Boolean> map = new HashMap<>(); 
    	return helper(arr, set);
    }
    private boolean helper(char[] arr, Map<char[], Boolean> map) {
    	if (map.containsKey(arr)) return map.get(arr);
    	for (int i = 0; i < arr.length - 1; i++) {
    		if (arr[i] == '+' && arr[i+1] == '+') {
    			arr[i] = '-';
    			arr[i+1] = '-';
    			boolean flag = helper(arr);
    			arr[i] = '+';
    			arr[i+1] = '+';
    			if (!flag) {
    				map.put(arr, true);
    				return true;
    			}
    		}
    	}
    	map.put(arr, false);
    	return false;
    }
}
